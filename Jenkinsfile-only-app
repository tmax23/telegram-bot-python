#!/usr/bin/env groovy

pipeline {
  agent any
	environment {
	  IMAGE_NAME = 'tmax23/tg-bot-py:latest'
    TG_BOT_TOKEN = credentials('tg-bot-token')
    OWEN_API_TOKEN = credentials('owen-token')
	}

  stages {

      stage('Get  IP') {
        environment {
          AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
          AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        }

        steps {
          script {
            dir ('terraform') {
              sh "terraform init"
              EC2_PUBLIC_IP = sh(
                script: "terraform output ec2_public_ip",
                returnStdout: true
                ).trim()

            }
          }
        }
      }


    stage('Build docker image') {
      steps {
        script {
          sh "echo 'TELEGRAM_API_TOKEN=${TG_BOT_TOKEN}' > ./.env"
          sh "echo 'OWEN_API_TOKEN=${OWEN_API_TOKEN}' >> ./.env"
          sh "echo 'EC2_IP_ADDRESS=${EC2_PUBLIC_IP}' >> ./.env"
          sh "echo 'ENV=prod' >> ./.env"

          withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
            sh "docker build -t ${IMAGE_NAME} ."
            sh "echo $PASS | docker login -u $USER --password-stdin"
            sh "docker push ${IMAGE_NAME}"
          }
        }
      }
    }

		stage('Deploy to EC2') {
			steps {
				script {


            def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME} ${EC2_PUBLIC_IP}"
				    def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"
            def botUrl = "url=https://${EC2_PUBLIC_IP}/"
            def certPath = "certificate=@/home/ec2-user/cert/public.pem"
            def curlCmd = "curl -F ${botUrl} -F ${certPath} https://api.telegram.org/bot${TG_BOT_TOKEN}/setWebhook"
            def curlCmdClean = "curl -F 'url=' https://api.telegram.org/bot${TG_BOT_TOKEN}/setWebhook"

            sshagent(['my-ssh-key']) {
              sh "scp -o StrictHostKeyChecking=no server-cmds.sh ${ec2Instance}:/home/ec2-user"
				      sh "scp -o StrictHostKeyChecking=no docker-compose.yaml ${ec2Instance}:/home/ec2-user"

              sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
              sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${curlCmdClean}"
              sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${curlCmd}"
				    }

			  }
			}
	  }
	}
}
